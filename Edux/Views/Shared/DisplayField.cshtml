@{
    var field = ViewBag.Field;
    bool readOnly1 = ViewBag.IsTabReadOnly;
    var user = ViewBag.User;
    IList<string> userRoles = ViewBag.UserRoles;
    int uploadIndex = ViewBag.UploadIndex;
    var entityRow = (EntityRow)ViewBag.EntityRow;

    Dictionary<string, string> initialValues;
    if (ViewBag.InitialValues != null)
    {
        initialValues = (Dictionary<string, string>)ViewBag.InitialValues;
    } else
    {
        initialValues = new Dictionary<string, string>();
    }
    bool CheckFieldVisibility(Field fieldToCheck)
    {
        return (fieldToCheck.Visibility == Visibility.VisibleToAll ||
            (fieldToCheck.Visibility == Visibility.ControlledByRoles && (!string.IsNullOrEmpty(fieldToCheck.InvisibleToRoles) && !userRoles.Contains(fieldToCheck.InvisibleToRoles))) ||
            (fieldToCheck.Visibility == Visibility.ControlledByRoles && (!string.IsNullOrEmpty(fieldToCheck.VisibleToRoles) && userRoles.Contains(fieldToCheck.VisibleToRoles))));
    }
    bool CheckFieldIsReadOnly(Field fieldToCheck)
    {
        return ((fieldToCheck.IsReadOnly == true && string.IsNullOrEmpty(fieldToCheck.ReadOnlyToRoles)) ||
                 (fieldToCheck.IsReadOnly == true && (!string.IsNullOrEmpty(fieldToCheck.ReadOnlyToRoles) && userRoles.Contains(fieldToCheck.ReadOnlyToRoles))));
    }
    string GetFieldValue(Field thefield)
    {
        return (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? entityRow.Values.GetValueOrDefault(thefield.PropertyId) : (initialValues.ContainsKey(thefield.Name) ? initialValues.GetValueOrDefault(thefield.Name) : thefield.Property.DefaultValue));
    }
}
@if (CheckFieldVisibility(field))
{
    bool readOnly = CheckFieldIsReadOnly(field);
    switch (field.EditorType)
    {
        case EditorType.Text:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">

                    <input type="text"
                            @(readOnly ? "readonly=readonly " : "")
                            onclick="@Html.Raw(field.OnClick)"
                            onchange="@Html.Raw(field.OnChange)"
                            name="@field.PropertyId"
                            id="@field.Name"
                            placeholder="@field.DisplayName"
                            @(field.Property.IsRequired ? "required " : "")
                            @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "")
                            value="@GetFieldValue(field)"
                            class="form-control" />
                </div>
            </div>    
            break;

        case EditorType.TextArea:

            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <textarea name="@field.PropertyId"
                              @(readOnly ? "readonly=readonly " : "")
                              id="@field.Name"
                              placeholder="@field.DisplayName"
                              @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") class="form-control">@GetFieldValue(field)</textarea>
                </div>
            </div>
            break;

        case EditorType.Html:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <textarea name="@field.PropertyId"
                                @(readOnly ? "readonly=readonly " : "")
                                id="@field.Name"
                                @(field.Property.IsRequired ? "required " : "")>@GetFieldValue(field)</textarea>
                    <script>
                CKEDITOR.replace('@field.Name');
                    </script>
                </div>
            </div>
            break;

        case EditorType.Select:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                   
                    @if (readOnly == false)
                    {
                        <select onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") class="form-control">

                            @if (!String.IsNullOrEmpty(field.OptionLabel))
                            {
                                <option value="">@field.OptionLabel</option>
                            }                                      
                            @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                            {
                                foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])
                                {
                                                        <option value="@value.Id" selected="@(value.Id == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue))">@value.Value</option>
                                }
                            }
                            else if (field.Property.PropertyType == PropertyType.Enum && !String.IsNullOrEmpty(field.Property.PresetValues))
                            {
                                foreach (var item in field.Property.PresetValues.Split(','))
                                {
                                                        <option value="@item" selected="@(item == GetFieldValue(field))">@item</option>
                                }
                            }
                        </select>
                    }
                    else
                    {
                        <select onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" class="form-control" disabled>

                            @if (!String.IsNullOrEmpty(field.OptionLabel))
                            {
                                <option value="">@field.OptionLabel</option>
                            }                                      
                            @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                            {
                                foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])
                                {
                                                        <option value="@value.Id" selected="@(value.Id == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue))">@value.Value</option>
                                }
                            }
                            else if (field.Property.PropertyType == PropertyType.Enum && !String.IsNullOrEmpty(field.Property.PresetValues))
                            {
                                foreach (var item in field.Property.PresetValues.Split(','))
                                {
                                                        <option value="@item" selected="@(item == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue))">@item</option>
                                }

                            }
                        </select>
                    }
                </div>
            </div>
            break;
        case EditorType.SelectMultiple:
            <div class="form-group">
                <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                    @if (readOnly == false)
                    {
                        <select name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") class="form-control selectpicker" multiple data-header="@field.DisplayName">

                            @if (!String.IsNullOrEmpty(field.OptionLabel))
                            {
                                <option value="">@field.OptionLabel</option>
                            }                                                         @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                            {
                                foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])
                                {
                                                        <option value="@value.Id" selected="@(value.Id == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue))">@value.Value</option>
                                }
                            }
                            else if (field.Property.PropertyType == PropertyType.Enum && !String.IsNullOrEmpty(field.Property.PresetValues))
                            {
                                foreach (var item in field.Property.PresetValues.Split(','))
                                {
                                                        <option value="@item" selected="@(item == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue))">@item</option>
                                }

                            }
                        </select>

                    }
                    @if (readOnly == true)
                    {
                        <select name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") class="form-control selectpicker" multiple data-header="@field.DisplayName" disabled>

                            @if (!String.IsNullOrEmpty(field.OptionLabel))
                            {
                                <option value="">@field.OptionLabel</option>
                            }                                                         @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                            {
                                foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])
                                {
                                                        <option value="@value.Id" selected="@(value.Id == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue))">@value.Value</option>
                                }
                            }
                            else if (field.Property.PropertyType == PropertyType.Enum && !String.IsNullOrEmpty(field.Property.PresetValues))
                            {
                                foreach (var item in field.Property.PresetValues.Split(','))
                                {
                                                        <option value="@item" selected="@(item == (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue))">@item</option>
                                }

                            }
                        </select>
                    }
                </div>
            </div>
            break;

        case EditorType.TreeView:
            <div class="form-group @field.Name">
                <div id="@field.Name">

                </div>
            </div>
            <script>
            $('#@field.Name').jstree({'plugins': ["wholerow", "checkbox"],
                'core': {
                    "themes": {
                        "responsive": false,
                        "icons": false
                    },
                    'data': [

                        @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                        {
                            foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])

                            {
                                if (value.Id == null)
                                {
                        <text>
                        { "id": '@value.Id', "parent": "#", "text": "@value.Value" },
                        </text>
                                }
                                else
                                {
                        <text>
                                    { "id": '@value.Id', "parent": "#", "text": "@value.Value" },
                        </text>
                                }
                            }
                        }
                    ]
                }
            });
            </script>
            break;
        case EditorType.Checkbox:
            <div class="form-group @field.Name">
                <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                    <input onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@(field.PropertyId)CheckBox" id="@(field.Name)CheckBox" type="checkbox" placeholder="@field.DisplayName" @(("true".CompareTo(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue) == 0) ? "checked=checked" : "") onclick="$('#@(field.Name)').val($('#@(field.Name)CheckBox')[0].checked)" />
                    <input name="@field.PropertyId" @(readOnly ? "readonly=readonly " : "") @(field.Property.IsRequired ? "required " : "") id="@field.Name" type="hidden" value="@(("true".CompareTo(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue) == 0).ToString().ToLower())" /><br />
                </div>

            </div>
            break;

        case EditorType.ImageUpload:
            @*Buraya onclick ve onchange eklenemedi.Sonra tekrar bakılacak*@
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label" style="padding-left:15px;">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-12">
                    <div class="fileinput fileinput-new" data-provides="fileinput">

                        <input type="hidden" name="@field.PropertyId" id="@field.Name" value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue)" />
                        <input type="hidden" name="@(field.PropertyId).UploadIndex" value="@uploadIndex" />
                        @{ uploadIndex++; }
                        <div value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue)" class="fileinput-preview thumbnail" data-trigger="fileinput" style="width: 200px; height: 150px;"><img src="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue)"> </div>
                        <div>
                            <span class="btn red btn-outline btn-file">
                                <span class="fileinput-new"> Resim Seç </span>
                                <span class="fileinput-exists"> Değiştir </span>
                                <input type="file" name="upload" />
                            </span>
                            <a href="javascript:;" class="btn red fileinput-exists" data-dismiss="fileinput"> Kaldır </a>


                        </div>
                    </div>

                </div>
            </div>
            <div class="clearfix margin-top-10" style="padding-bottom:10px;">
                <span class="label label-success">NOT!</span> Resim Uzantısı .jpg .jpeg yada .png olmalıdır..
            </div>
                                break;
                            case EditorType.Media:
            @*Buraya onclick ve onchange eklenemedi.Sonra tekrar bakılacak*@
            <div class="form-group @field.Name">
                <input type="hidden" name="@field.PropertyId" id="@field.Name" value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue)" />
                <input type="hidden" name="@(field.PropertyId).UploadIndex" value="@uploadIndex" />
                @{ uploadIndex++; }



                <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName</label>
                <div class="col-md-9">

                    <div class="input-group">
                        <input type="text" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="Photo" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue)" class="form-control" />
                        <span class="input-group-btn">
                            <a class="btn btn-info" id="uploadModal" onclick="browseMedia('Photo')">...</a>
                        </span>
                    </div>
                </div>
            </div>

            @Html.Partial("_BrowseMedia", new ViewDataDictionary(this.ViewData) { { "element", "Photo" } })

                        break;

                    case EditorType.DatePicker:
                    <div class="form-group @field.Name">
                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                        <div class="col-md-9">
                            <input type="date" @(readOnly ? "readonly=readonly " : "") @(field.Property.IsRequired ? "required " : "") @(field.Property.IsRequired ? "required " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@GetFieldValue(field)" class="form-control" />
                        </div>
                    </div>
                        break;
                    case EditorType.DateTimePicker:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "" )</label>
                <div class="col-md-9">
                    <input type="datetime-local" @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                </div>
            </div>              
                        break;
                    case EditorType.TimePicker:
                    <div class="form-group @field.Name">
                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                            <input type="time" @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                        </div>
                    </div>
                        break;

                    case EditorType.Tel:
                    <div class="form-group @field.Name">
                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                        <div class="col-md-9">
                            <input type="text" @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                        </div>
                    </div>
                        break;
                    case EditorType.Email:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <input type="text" @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                </div>
            </div>
                        break;

                    case EditorType.Hidden:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <input type="hidden" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                </div>
            </div>
                        break;
                    case EditorType.Password:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <input type="password" @(readOnly ? "readonly=readonly " : "") name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                </div>
            </div>      
                        break;
                    case EditorType.Number:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">
                    <input type="text" @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" @(field.Property.IsRequired ? "required " : "") @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(GetFieldValue(field))" class="form-control" />
                </div>
            </div>
                        break;
                    case EditorType.IdentityNumber:
            <div class="form-group @field.Name">
                <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                <div class="col-md-9">                                                                     
                    <input type="number" pattern=".{11,11}" required title="11 karakter olması zorunludur." @(readOnly ? "readonly=readonly " : "") onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string, string>)ViewBag.InitialValues).ContainsKey(field.Name)) ? ViewBag.InitialValues[field.Name].ToString() : field.Property.DefaultValue)" class="form-control" />
                </div>
            </div>
                        break;

                    case EditorType.Component:
            <div class="form-group @field.Name">
                @await Component.InvokeAsync(field.Component.ComponentType.Name, new { component = field.Component, relatedId = (ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => (field.Property.DataSourceProperty != null && field.Property.DataSourceProperty.DataSourceProperty != null ? v.PropertyId == field.Property.DataSourceProperty.DataSourceProperty.Id : false))?.Id : "") })
            </div>
                                break;
                        }
                    }