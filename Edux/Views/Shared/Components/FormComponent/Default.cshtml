
@model Component
@{ var form = (Form)ViewBag.Form;}
@{ 
    var tabs = form.Tabs.OrderBy(o => o.Position).ToList();
}

<!-- BEGIN THEME GLOBAL STYLES -->
<link href="/metronic/global/plugins/bootstrap-fileinput/bootstrap-fileinput.css" rel="stylesheet" type="text/css" />
<link href="/metronic/global/plugins/jstree/dist/themes/default/style.min.css" rel="stylesheet" type="text/css">
<script src="/metronic/global/plugins/jstree/dist/jstree.js"></script>
<!-- END THEME GLOBAL STYLES -->
<link href="~/metronic/global/css/components-md.min.css" rel="stylesheet" type="text/css" />
<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption font-red-sunglo">

            <span class="caption-subject bold uppercase">@Model.DisplayName @(ViewBag.Mode.ToString().ToLowerInvariant() == "edit" ? "Düzenle" : (ViewBag.Mode.ToString().ToLowerInvariant() == "delete" ? "Sil" : "Oluştur"))
            </span>
        </div>
       
        
    </div>
    <div class="portlet-body form">                
                <form id="@form.Name" asp-controller="Home" asp-action="SaveForm" method="post" enctype="multipart/form-data" role="form">
                    <div class="form-body">
                        
                        <input type="hidden" name="FormId" id="FormId" value="@form.Id" />
                        <input type="hidden" name="Mode" id="Mode" value="@ViewBag.Mode" />
                        <input type="hidden" name="RowId" id="RowId" value="@ViewBag.RowId" />
                        <input type="hidden" name="ReturnUrl" id="ReturnUrl" value="@ViewBag.ReturnUrl" />
                        <ul class="nav nav-tabs">
                            @{ var k = 1;}
                            @foreach (var tab in tabs)
                            {
                                <li @(k == 1 ? "class=active" : "")>
                                    <a href="#@tab.Name" data-toggle="tab"> @tab.DisplayName </a>
                                </li>
                                k++;
                            }


                        </ul>
                        <div class="tab-content">
                            @{ k = 1;}
                            @foreach (var tab in tabs)
                            {
                                <div class="tab-pane fade @(k==1?"active":"") in" id="@tab.Name">

                                    <div class="form-horizontal">

                                        @for (var i = 1; i <= tab.Fields.Select(s => s.Row).Distinct().Count(); i++)
                {
                                            <div class="row">
                                                @{ var colCount = tab.Fields.Where(s => s.TabId == tab.Id && s.Row == i).Select(s => s.Col).Distinct().Count(); }
                                                @for (var j = 1; j <= colCount; j++)
                                                {

                                                    <div class="col-md-@(12 / colCount)">
                                                        @foreach (var field in tab.Fields.Where(s => s.TabId == tab.Id && s.Row == i && s.Col == j).OrderBy(f => f.Position))
                                                        {
                                                            int uploadIndex = 0;
                                                            <input type="hidden" name="@(field.PropertyId).EntityId" id="@(field.Name).EntityId" value="@field.Property.EntityId" />
                                                            switch (field.EditorType)
                                                            {

                                                                case EditorType.Text:
                                                                    <div class="form-group">
                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                            <input
                                                                                   type="text"
                                                                                   onclick="@Html.Raw(field.OnClick)"
                                                                                   onchange="@Html.Raw(field.OnChange)"
                                                                                   name="@field.PropertyId"
                                                                                   id="@field.Name"
                                                                                   placeholder="@field.DisplayName"
                                                                                   required="@(field.Property.IsRequired)"
                                                                                   @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "")
                                                                                   value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name)?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue))"
                                                                                   class="form-control" />
                                                                        </div>
                                                                    </div>
                                                                    break;
                                                                case EditorType.TextArea:
                                                                    <div class="form-group">
                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                            <textarea name="@field.PropertyId" 
                                                                                      id="@field.Name" 
                                                                                      placeholder="@field.DisplayName" 
                                                                                      required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") class="form-control">@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:(ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)</textarea>
                                                                        </div>
                                                                    </div>
                                                                    break;
                                                                case EditorType.Html:

                                                                    <div class="form-group">
                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                            <textarea name="@field.PropertyId" id="@field.Name" required="@(field.Property.IsRequired)">@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:(ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)</textarea>
                                                                            <script>
                                                        CKEDITOR.replace('@field.Name');
                                                                            </script>
                                                                        </div>
                                                                    </div>

                                                                    break;

                                                                case EditorType.Select:
                                                                    <div class="form-group">
                                                                        <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                            <select onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)"  name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" class="form-control">
                                                                                @if (!String.IsNullOrEmpty(field.OptionLabel))
                                                                                {
                                                                                    <option value="">@field.OptionLabel</option>
                                                                                }                                                         @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                                                                                {
                                                                                    foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])
                                                                                    {
                                                                                        <option value="@value.Id" selected="@(value.Id==(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:(ViewBag.InitialValues != null &&((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue))">@value.Value</option>
                                                                                    }
                                                                                }
                                                                                else if (field.Property.PropertyType == PropertyType.Enum && !String.IsNullOrEmpty(field.Property.PresetValues))
                                                                                {
                                                                                    foreach (var item in field.Property.PresetValues.Split(','))
                                                                                    {
                                                                                        <option value="@item" selected="@(item==(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:(ViewBag.InitialValues != null &&((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue))">@item</option>
                                                                                    }

                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>

                                                                    break;
                                                                case EditorType.TreeView:
                                                                    <div class="form-group">
                                                                        <div id="@field.Name">

                                                                        </div>
                                                                    </div>
                                                                    <script>
        
            $('#@field.Name').jstree({
                'plugins': ["wholerow", "checkbox"],
                'core': {
                    "themes": {
                        "responsive": false,
                        "icons": false
                    },
                    'data': [

                        @if (field.Property.DataSourceProperty != null && ViewBag.DataSourcePropertyValues != null)
                        {
                            foreach (var value in ((IDictionary<string, IList<PropertyValue>>)ViewBag.DataSourcePropertyValues)[field.Property.DataSourceProperty.Id])

                            {
                                if (value.Id == null)
                                {
                        <text>
                        { "id": '@value.Id', "parent": "#", "text": "@value.Value" },
                        </text>
                                }
                                else
                                {
                        <text>
                                    { "id": '@value.Id', "parent": "#", "text": "@value.Value" },
                        </text>
                                    }
                                }
                            }
                    ]
                }
            });
         
        
                                                                    </script>
                                                                    
                                                                    break;
                                                                case EditorType.Checkbox:

                                                                    <div class="form-group">
                                                                        <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                                                                        <div class="col-md-9">
                                                                            <input onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@(field.PropertyId)CheckBox" id="@(field.Name)CheckBox" type="checkbox" placeholder="@field.DisplayName" @(("true".CompareTo(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : field.Property.DefaultValue) == 0) ? "checked=checked" : "") onclick="$('#@(field.Name)').val($('#@(field.Name)CheckBox')[0].checked)" />
                                                                            <input name="@field.PropertyId" id="@field.Name" type="hidden" value="@(("true".CompareTo(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:field.Property.DefaultValue)==0).ToString().ToLower())" /><br />
                                                                        </div>                                                                                           
                                                                    </div>

                                                                    break;


                                                                case EditorType.ImageUpload:
                                                                    @*Buraya onclick ve onchange eklenemedi.Sonra tekrar bakılacak*@
                                                                    <div class="form-group">
                                                                        <label for="@field.Name" class="control-label" style="padding-left:15px;">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label>
                                                                        <div class="col-md-12">
                                                                            <div class="fileinput fileinput-new" data-provides="fileinput">

                                                                                <input type="hidden" name="@field.PropertyId" id="@field.Name" value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" />
                                                                                <input type="hidden" name="@(field.PropertyId).UploadIndex" value="@uploadIndex" />
                                                                                @{ uploadIndex++; }
                                                                                <div value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:field.Property.DefaultValue)" class="fileinput-preview thumbnail" data-trigger="fileinput" style="width: 200px; height: 150px;"><img src="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:field.Property.DefaultValue)"> </div>
                                                                                <div>
                                                                                    <span class="btn red btn-outline btn-file">
                                                                                        <span class="fileinput-new"> Resim Seç </span>
                                                                                        <span class="fileinput-exists"> Değiştir </span>
                                                                                        <input type="file" name="upload" />
                                                                                    </span>
                                                                                    <a href="javascript:;" class="btn red fileinput-exists" data-dismiss="fileinput"> Kaldır </a>


                                                                                </div>
                                                                            </div>

                                                                        </div>
                                                                    </div>
                                                                    <div class="clearfix margin-top-10" style="padding-bottom:10px;">
                                                                        <span class="label label-success">NOT!</span> Resim Uzantısı .jpg .jpeg yada .png olmalıdır..
                                                                    </div>
                                                                                        break;
                                                                                    case EditorType.Media:
                                                                                        @*Buraya onclick ve onchange eklenemedi.Sonra tekrar bakılacak*@
                                                                                        <div class="form-group">
                                                                                            <input type="hidden" name="@field.PropertyId" id="@field.Name" value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" />
                                                                                            <input type="hidden" name="@(field.PropertyId).UploadIndex" value="@uploadIndex" />
                                                                                            @{ uploadIndex++; }



                                                                                            <label for=" @field.Name" class="control-label col-md-3">@field.DisplayName</label>
                                                                                            <div class="col-md-9">

                                                                                                <div class="input-group">
                                                                                                    <input type="text" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="Photo" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete"?((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v=>v.PropertyId == field.PropertyId)?.Value:field.Property.DefaultValue)" class="form-control" />
                                                                                                    <span class="input-group-btn">
                                                                                                        <a class="btn btn-info" id="uploadModal" onclick="browseMedia('Photo')">...</a>
                                                                                                    </span>
                                                                                                </div>
                                                                                            </div>
                                                                                            @Html.ValidationMessageFor(model => field.Name, "", new { @class = "text-danger" })
                                                                                        </div>

                                                                                        @Html.Partial("_BrowseMedia", new ViewDataDictionary(this.ViewData) { { "element", "Photo" } })


                                                                                                    break;





                                                                                                case EditorType.DatePicker:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="date" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.DateTimePicker:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="datetime-local" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.TimePicker:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="time" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;

                                                                                                case EditorType.Tel:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="text" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.Email:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="text" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;

                                                                                                case EditorType.Hidden:
                                                                                                    <div class="form-group">

                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                        <input type="hidden" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.Password:
                                                                                                    <div class="form-group">

                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="password" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.Number:
                                                                                                    <div class="form-group">
                                                                                                        <label for="@field.Name" class="control-label col-md-3">@field.DisplayName@(field.Property.IsRequired ? "*" : "")</label><div class="col-md-9">
                                                                                                            <input type="text" onclick="@Html.Raw(field.OnClick)" onchange="@Html.Raw(field.OnChange)" name="@field.PropertyId" id="@field.Name" placeholder="@field.DisplayName" required="@(field.Property.IsRequired)" @(field.Property.StringLength > 0 ? "maxlength=" + field.Property.StringLength : "") value="@(ViewBag.Mode == "edit" || ViewBag.Mode == "delete" ? ((List<PropertyValue>)ViewBag.RowValues).FirstOrDefault(v => v.PropertyId == field.PropertyId)?.Value : (ViewBag.InitialValues != null && ((Dictionary<string,string>)ViewBag.InitialValues).ContainsKey(field.Name))?ViewBag.InitialValues[field.Name].ToString():field.Property.DefaultValue)" class="form-control" />
                                                                                                        </div>
                                                                                                    </div>
                                                                                                    break;
                                                                                                case EditorType.Component:
                                                                                                    <div class="form-group">
                                                                                                        Seçilen component gelecek
                                                                                                        @*@await Component.InvokeAsync(field.Component.Name, new { component = field.Component })*@
                                                                                                    </div>
                                                                                                            break;
                                                                                                    }
                                                                                                }
                                                    </div>
                                                                                                    k++;
                                                                                                }

                                            </div>
                                                                                                }
                                    </div>
                                </div>
                                                                                                }
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn blue">@(ViewBag.Mode.ToString().ToLowerInvariant() == "edit" ? "Kaydet" : (ViewBag.Mode.ToString().ToLowerInvariant() == "delete" ? "Sil" : "Oluştur"))</button>
                            @if (!String.IsNullOrEmpty(ViewBag.ReturnUrl))
                            {
                                <a class="btn default" href="@ViewBag.ReturnUrl">İptal</a>
                            }
                        </div>
                    </div>                       
            
        </form>
    </div>
</div>
@if (ViewBag.Mode == "delete")
{
    <script>
    $(function () {
        $("#@form.Name").attr('novalidate', 'novalidate');
    });
    </script>
}

<script src="/metronic/global/plugins/bootstrap-fileinput/bootstrap-fileinput.js" type="text/javascript"></script>

<script>
    @Html.Raw(form.Scripts);
</script>