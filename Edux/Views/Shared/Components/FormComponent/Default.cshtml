@inject UserManager<ApplicationUser> userManager
@model Component
@{
    var form = (Form)ViewBag.Form;
    var tabs = form.Tabs.OrderBy(o => o.Position).ToList();
    string mode = ViewBag.Mode.ToString().ToLowerInvariant();
    long rowId = 1;
    if (!String.IsNullOrEmpty(ViewBag.RowId)) {
        rowId = Convert.ToInt64(ViewBag.RowId);
    }
    string returnUrl = ViewBag.ReturnUrl;
    var user = userManager.Users.FirstOrDefault(u => u.UserName == User.Identity.Name);
    var userRoles = await userManager.GetRolesAsync(user);

    bool CheckTabVisibility(Tab tab)
    {
        return (tab.Visibility == Visibility.VisibleToAll || (tab.Visibility == Visibility.ControlledByRoles && (!string.IsNullOrEmpty(tab.InvisibleToRoles) && !userRoles.Contains(tab.InvisibleToRoles))) ||
                        (tab.Visibility == Visibility.ControlledByRoles && (!string.IsNullOrEmpty(tab.VisibleToRoles) && userRoles.Contains(tab.VisibleToRoles))));
    }

    bool CheckTabIsReadOnly(Tab tab)
    {
        return ((tab.IsReadOnly == true && string.IsNullOrEmpty(tab.ReadOnlyToRoles)) ||
                               (tab.IsReadOnly == true && (!string.IsNullOrEmpty(tab.ReadOnlyToRoles) && userRoles.Contains(tab.ReadOnlyToRoles))));
    }
}

<!-- BEGIN THEME GLOBAL STYLES -->
<link href="/metronic/global/plugins/bootstrap-fileinput/bootstrap-fileinput.css" rel="stylesheet" type="text/css" />
<link href="/metronic/global/plugins/jstree/dist/themes/default/style.min.css" rel="stylesheet" type="text/css">
<script src="/metronic/global/plugins/jstree/dist/jstree.js"></script>
<!-- END THEME GLOBAL STYLES -->
<link href="~/metronic/global/css/components-md.min.css" rel="stylesheet" type="text/css" />
<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption font-red-sunglo">

            <span class="caption-subject bold uppercase">
                @Model.DisplayName @(mode == "edit" ? "Düzenle" : mode == "delete" ? "Sil" : "Oluştur")
            </span>
        </div>


    </div>
    <div class="portlet-body form">
        <form id="@form.Name" asp-controller="Home" asp-action="SaveForm" method="post" enctype="multipart/form-data" role="form">
            <div class="form-body">
                <input type="hidden" name="FormId" id="FormId" value="@form.Id" />
                <input type="hidden" name="Mode" id="Mode" value="@mode" />
                <input type="hidden" name="RowId" id="RowId" value="@rowId" />
                <input type="hidden" name="ReturnUrl" id="ReturnUrl" value="@returnUrl" />
                <ul class="nav nav-tabs">
                    @* show tabs *@
                    @{ var k = 1;}
                    @foreach (var tab in tabs)
    {
        if (CheckTabVisibility(tab))
        {
                <li @(k == 1 ? "class=active" : "")>
                    <a href="#@tab.Name" data-toggle="tab"> @tab.DisplayName </a>
                </li>
                            k++;
                        }
                    }

                </ul>
                <div class="tab-content">
                    @{ k = 1;}
                    @foreach (var tab in tabs)
                    {
                        if (CheckTabVisibility(tab))
                        {
                            bool readOnly1 = CheckTabIsReadOnly(tab);

                            <div class="tab-pane fade @(k == 1 ? "active" : "") in" id="@tab.Name">
                                @* önce fieldset'lerin içindeki alanları görüntüle: *@
                                @{ var fieldsets = tab.Fields.Where(f => f.TabId == tab.Id && f.FieldsetId != null).OrderBy(fs => fs.Fieldset.Position).Select(s => s.Fieldset).Distinct().ToList();}
                                @foreach (var fieldset in fieldsets)
                                {
                                    <fieldset class="@fieldset.CssClass">
                                        <legend>@fieldset.DisplayName</legend>


                                        <div class="form-horizontal">

                                            @for (var i = 1; i <= tab.Fields.Where(f => f.FieldsetId == fieldset.Id).Select(s => s.Row).Distinct().Count(); i++)
                                            {
                                                <div class="row">
                                                    @{ var colCount = tab.Fields.Where(s => s.FieldsetId == fieldset.Id && s.TabId == tab.Id && s.Row == i).Select(s => s.Col).Distinct().Count(); }
                                                    @for (var j = 1; j <= colCount; j++)
                                                    {
                                                        var fields = tab.Fields.Where(s => s.FieldsetId == fieldset.Id && s.TabId == tab.Id && s.Row == i && s.Col == j).OrderBy(f => f.Position);

                                                        <div class="col-md-@(12 / colCount)">
                                                            @foreach (var field in fields)
                                                            {
                                                                int uploadIndex = 0;
                                                               
                                                                <input type="hidden" name="@(field.PropertyId).EntityId" id="@(field.Name).EntityId" value="@field.Property.EntityId" />
                                                                ViewBag.Field = field;
                                                                ViewBag.IsTabReadOnly = readOnly1;
                                                                ViewBag.User = user;
                                                                ViewBag.UserRoles = userRoles;
                                                                ViewBag.UploadIndex = uploadIndex;
                                                                await Html.RenderPartialAsync("DisplayField", ViewData);
                                                            }
                                                        </div>
                                                        k++;
                                                    }

                                                </div>
                                            }
                                        </div>
                                    </fieldset>

                                }

                                @* Yukarıdaki bölüm fieldset varsa onun içindeki alanları görüntüler, aşağıdaki bölüm fieldset'e bağlı olmayan alanları görüntüler:*@
                                <div class="form-horizontal">

                                    @for (var i = 1; i <= tab.Fields.Where(f => f.FieldsetId == null).Select(s => s.Row).Distinct().Count(); i++)
                                    {
                                        <div class="row">
                                            @{ var colCount = tab.Fields.Where(s => s.FieldsetId == null && s.TabId == tab.Id && s.Row == i).Select(s => s.Col).Distinct().Count(); }
                                            @for (var j = 1; j <= colCount; j++)
                                            {


                                                <div class="col-md-@(12 / colCount)">
                                                    @foreach (var field in tab.Fields.Where(s => s.FieldsetId == null && s.TabId == tab.Id && s.Row == i && s.Col == j).OrderBy(f => f.Position))
                                                    {
                                                        int uploadIndex = 0;
                                                        <input type="hidden" name="@(field.PropertyId).EntityId" id="@(field.Name).EntityId" value="@field.Property.EntityId" />
                                                        ViewBag.Field = field;
                                                        ViewBag.IsTabReadOnly = readOnly1;
                                                        ViewBag.User = user;
                                                        ViewBag.UserRoles = userRoles;
                                                        ViewBag.UploadIndex = uploadIndex;
                                                        await Html.RenderPartialAsync("DisplayField", ViewData);
                                                    }
                                                </div>
                                                k++;
                                            }

                                        </div>
                                    }
                                </div>

                            </div>
                        }
                    }
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn blue">@(ViewBag.Mode.ToString().ToLowerInvariant() == "edit" ? "Kaydet" : (ViewBag.Mode.ToString().ToLowerInvariant() == "delete" ? "Sil" : "Oluştur"))</button>
                    @if (!String.IsNullOrEmpty(ViewBag.ReturnUrl))
                    {
                        <a class="btn default" href="@ViewBag.ReturnUrl">İptal</a>
                    }
                </div>
            </div>

        </form>
    </div>
</div>
@if (ViewBag.Mode == "delete")
{
    <script>
    $(function () {
        $("#@form.Name").attr('novalidate', 'novalidate');
    });
    </script>
}
@*<script>
        $(document).ready(function(){
      $('form input[minlength]').on('keyup', function(){
        e_len = $(this).val().trim().length
        e_min_len = Number($(this).attr('minlength'))
        message = e_min_len <= e_len ? '' : e_min_len + ' characters minimum'
        this.setCustomValidity(message)
      })
    })
    </script>*@
<script src="/metronic/global/plugins/bootstrap-fileinput/bootstrap-fileinput.js" type="text/javascript"></script>

<script>
    @Html.Raw(form.Scripts);
</script>